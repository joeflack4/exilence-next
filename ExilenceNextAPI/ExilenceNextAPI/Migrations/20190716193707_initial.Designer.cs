// <auto-generated />
using System;
using ExilenceNextAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExilenceNextAPI.Migrations
{
    [DbContext(typeof(ExilenceContext))]
    [Migration("20190716193707_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExilenceNextAPI.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Connected");

                    b.Property<DateTime>("LastSeen");

                    b.Property<int?>("PlayerId");

                    b.HasKey("ConnectionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.PlayerLeague", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerLeagues");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.PricedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Calculated");

                    b.Property<bool>("Corrupted");

                    b.Property<bool>("Elder");

                    b.Property<double>("FrameType");

                    b.Property<string>("Icon");

                    b.Property<double>("Ilvl");

                    b.Property<double>("Level");

                    b.Property<double>("Links");

                    b.Property<double>("Max");

                    b.Property<double>("Mean");

                    b.Property<double>("Median");

                    b.Property<double>("Min");

                    b.Property<double>("Mode");

                    b.Property<string>("Name");

                    b.Property<double>("Quality");

                    b.Property<bool>("Shaper");

                    b.Property<double>("Sockets");

                    b.Property<double>("StackSize");

                    b.Property<int?>("TabId");

                    b.Property<double>("Tier");

                    b.Property<double>("TotalStacksize");

                    b.Property<string>("TypeLine");

                    b.Property<string>("Variant");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.SelectedTab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlayerLeagueId");

                    b.Property<string>("TabId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PlayerLeagueId");

                    b.ToTable("SelectedTab");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.Snapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlayerLeagueId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PlayerLeagueId");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.Tab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour")
                        .IsRequired();

                    b.Property<bool>("Hidden");

                    b.Property<int>("I");

                    b.Property<int>("LeagueId");

                    b.Property<string>("N")
                        .IsRequired();

                    b.Property<bool>("Selected");

                    b.Property<string>("TabId")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.TabSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SnapshotId");

                    b.Property<string>("TabId")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId");

                    b.ToTable("TabSnapshots");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.Connection", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.PlayerLeague", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.Player")
                        .WithMany("Leagues")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.PricedItem", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.Tab")
                        .WithMany("Items")
                        .HasForeignKey("TabId");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.SelectedTab", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.PlayerLeague")
                        .WithMany("SelectedTabs")
                        .HasForeignKey("PlayerLeagueId");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.Snapshot", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.PlayerLeague")
                        .WithMany("Snapshots")
                        .HasForeignKey("PlayerLeagueId");
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.Tab", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.PlayerLeague", "League")
                        .WithMany("Tabs")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExilenceNextAPI.Entities.TabSnapshot", b =>
                {
                    b.HasOne("ExilenceNextAPI.Entities.Snapshot")
                        .WithMany("TabSnapshots")
                        .HasForeignKey("SnapshotId");
                });
#pragma warning restore 612, 618
        }
    }
}
